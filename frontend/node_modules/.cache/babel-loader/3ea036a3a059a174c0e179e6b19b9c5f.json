{"ast":null,"code":"var _jsxFileName = \"/Users/zack/Desktop/code/fullstack-engineer-exercise-1/frontend/src/common/CheckboxInput.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Form from 'react-bootstrap/Form';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default _s(({\n  question\n}) => {\n  _s();\n\n  const values = useSelector(state => state.questionFour);\n  const dispatch = useDispatch();\n\n  const handleInputChange = event => {\n    const value = event.target.value;\n\n    if (values.includes(value)) {\n      let index = question.options.indexOf(value);\n      let updatedSelection = values;\n      updatedSelection.splice(index, 1);\n      dispatch({\n        type: 'REMOVEFROMQUESTIONFIVE',\n        payload: updatedSelection\n      });\n    } else {\n      dispatch({\n        type: 'ADDTOQUESTIONFIVE',\n        payload: value\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n      children: question.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }, this), question.options.map((option, index) => {\n      return /*#__PURE__*/_jsxDEV(Form.Check, {\n        label: option,\n        onChange: handleInputChange,\n        value: option\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this);\n    })]\n  }, void 0, true);\n}, \"n0XxVCPrV9TlG/Vd5aU/zn8AcRk=\", false, function () {\n  return [useSelector, useDispatch];\n});","map":{"version":3,"sources":["/Users/zack/Desktop/code/fullstack-engineer-exercise-1/frontend/src/common/CheckboxInput.js"],"names":["React","useDispatch","useSelector","Form","question","values","state","questionFour","dispatch","handleInputChange","event","value","target","includes","index","options","indexOf","updatedSelection","splice","type","payload","title","map","option"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,IAAP,MAAiB,sBAAjB;;;AAEA,kBAAe,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AAC/B,QAAMC,MAAM,GAAGH,WAAW,CAAEI,KAAD,IAAWA,KAAK,CAACC,YAAlB,CAA1B;AACA,QAAMC,QAAQ,GAAGP,WAAW,EAA5B;;AACA,QAAMQ,iBAAiB,GAAIC,KAAD,IAAW;AACnC,UAAMC,KAAK,GAAGD,KAAK,CAACE,MAAN,CAAaD,KAA3B;;AACA,QAAIN,MAAM,CAACQ,QAAP,CAAgBF,KAAhB,CAAJ,EAA4B;AAC1B,UAAIG,KAAK,GAAGV,QAAQ,CAACW,OAAT,CAAiBC,OAAjB,CAAyBL,KAAzB,CAAZ;AACA,UAAIM,gBAAgB,GAAGZ,MAAvB;AACAY,MAAAA,gBAAgB,CAACC,MAAjB,CAAwBJ,KAAxB,EAA+B,CAA/B;AAEAN,MAAAA,QAAQ,CAAC;AAAEW,QAAAA,IAAI,EAAE,wBAAR;AAAkCC,QAAAA,OAAO,EAAEH;AAA3C,OAAD,CAAR;AACD,KAND,MAMO;AACLT,MAAAA,QAAQ,CAAC;AAAEW,QAAAA,IAAI,EAAE,mBAAR;AAA6BC,QAAAA,OAAO,EAAET;AAAtC,OAAD,CAAR;AACD;AACF,GAXD;;AAaA,sBACE;AAAA,4BACA,QAAC,IAAD,CAAM,KAAN;AAAA,gBAAaP,QAAQ,CAACiB;AAAtB;AAAA;AAAA;AAAA;AAAA,YADA,EAECjB,QAAQ,CAACW,OAAT,CAAiBO,GAAjB,CAAqB,CAACC,MAAD,EAAST,KAAT,KAAmB;AACvC,0BACE,QAAC,IAAD,CAAM,KAAN;AAEE,QAAA,KAAK,EAAES,MAFT;AAGE,QAAA,QAAQ,EAAEd,iBAHZ;AAIE,QAAA,KAAK,EAAEc;AAJT,SACOT,KADP;AAAA;AAAA;AAAA;AAAA,cADF;AAQD,KATA,CAFD;AAAA,kBADF;AAeD,CA/BD;AAAA,UACiBZ,WADjB,EAEmBD,WAFnB;AAAA","sourcesContent":["import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Form from 'react-bootstrap/Form'\n\nexport default ({ question }) => {\n  const values = useSelector((state) => state.questionFour)\n  const dispatch = useDispatch()\n  const handleInputChange = (event) => {\n    const value = event.target.value\n    if (values.includes(value)) {\n      let index = question.options.indexOf(value)\n      let updatedSelection = values\n      updatedSelection.splice(index, 1)\n\n      dispatch({ type: 'REMOVEFROMQUESTIONFIVE', payload: updatedSelection })\n    } else {\n      dispatch({ type: 'ADDTOQUESTIONFIVE', payload: value })\n    }\n  }\n\n  return (\n    <>\n    <Form.Label>{question.title}</Form.Label>\n    {question.options.map((option, index) => {\n      return (\n        <Form.Check\n          key={index}\n          label={option}\n          onChange={handleInputChange}\n          value={option}\n        />\n      )\n    })}\n    </>\n  )\n}"]},"metadata":{},"sourceType":"module"}