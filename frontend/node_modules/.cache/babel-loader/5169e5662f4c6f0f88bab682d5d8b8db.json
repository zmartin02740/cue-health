{"ast":null,"code":"var _jsxFileName = \"/Users/zack/Desktop/code/fullstack-engineer-exercise-1/frontend/src/pages/survey/questions.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Container from 'react-bootstrap/Container';\nimport Question from './question';\nimport ValidationHandler from '../../common/ValidationHandler';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Questions({\n  questionCount,\n  questions\n}) {\n  _s();\n\n  const [validations, setValidations] = useState([]);\n  const value = useSelector(state => state.value);\n  const questionOne = useSelector(state => state.questionOne);\n  const questionTwo = useSelector(state => state.questionTwo);\n  const questionThree = useSelector(state => state.questionThree);\n  const questionFour = useSelector(state => state.questionFour);\n  const questionFive = useSelector(state => state.questionFive);\n  const responses = useSelector(state => state.responses);\n  const dispatch = useDispatch();\n\n  const surveySubmission = () => {\n    const response = {\n      qOne: questionOne,\n      qTwo: questionTwo,\n      qThree: questionThree,\n      qFour: questionFour,\n      qFive: questionFive\n    };\n    let validationErrors = []; // Validates each input\n\n    const qOneValidation = ValidationHandler(questionOne);\n    const qTwoValidation = ValidationHandler(questionTwo);\n    const qThreeValidation = ValidationHandler(questionThree);\n    const qFourValidation = ValidationHandler(questionFour);\n    const qFiveValidation = ValidationHandler(questionFive); // CHecks to see if any inputs failed validation\n\n    if (qOneValidation.length > 0) validationErrors.push(qOneValidation);\n    if (qTwoValidation.length > 0) validationErrors.push(qTwoValidation);\n    if (qThreeValidation.length > 0) validationErrors.push(qThreeValidation);\n    if (qFourValidation.length > 0) validationErrors.push(qFourValidation);\n    if (qFiveValidation.length > 0) validationErrors.push(qFiveValidation);\n\n    if (validationErrors.length > 0) {\n      setValidations(validationErrors);\n    } else {\n      // refreshing submission for next user\n      setValidations([]);\n      dispatch({\n        type: 'UPDATERESPONSES',\n        payload: response\n      });\n      dispatch({\n        type: 'UPDATESQUESTIONONE',\n        payload: ''\n      });\n      dispatch({\n        type: 'UPDATESQUESTIONTWO',\n        payload: ''\n      });\n      dispatch({\n        type: 'UPDATESQUESTIONTHREE',\n        payload: ''\n      });\n      dispatch({\n        type: 'CLEARQUESTIONFOUR'\n      });\n      dispatch({\n        type: 'CLEARQUESTIONFIVE'\n      });\n      dispatch({\n        type: 'ZERO'\n      });\n    }\n  };\n\n  const buttonStyle = {\n    margin: 40\n  };\n  const containerStyle = {\n    paddingTop: 30\n  };\n  const errorStyle = {\n    color: 'red'\n  };\n\n  let chosenQuestion = /*#__PURE__*/_jsxDEV(Question, {\n    question: questions[value]\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 24\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    style: containerStyle,\n    children: [/*#__PURE__*/_jsxDEV(Col, {\n      children: chosenQuestion\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Col, {\n      children: [\"(\", value + 1, \" / \", questionCount, \")\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Col, {\n      style: errorStyle,\n      children: validations.length > 0 ? validations.join(', ') : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      \"data-test\": \"button\",\n      onClick: surveySubmission,\n      style: buttonStyle,\n      variant: \"primary\",\n      children: \"Submit Survey\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Questions, \"mpjpRe/dxd4HqIeTHsk0ANaEV4Q=\", false, function () {\n  return [useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useDispatch];\n});\n\n_c = Questions;\nexport default Questions;\n\nvar _c;\n\n$RefreshReg$(_c, \"Questions\");","map":{"version":3,"sources":["/Users/zack/Desktop/code/fullstack-engineer-exercise-1/frontend/src/pages/survey/questions.js"],"names":["React","useState","useDispatch","useSelector","Button","Col","Container","Question","ValidationHandler","Questions","questionCount","questions","validations","setValidations","value","state","questionOne","questionTwo","questionThree","questionFour","questionFive","responses","dispatch","surveySubmission","response","qOne","qTwo","qThree","qFour","qFive","validationErrors","qOneValidation","qTwoValidation","qThreeValidation","qFourValidation","qFiveValidation","length","push","type","payload","buttonStyle","margin","containerStyle","paddingTop","errorStyle","color","chosenQuestion","join"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Button from 'react-bootstrap/Button'\nimport Col from 'react-bootstrap/Col'\nimport Container from 'react-bootstrap/Container'\nimport Question from './question'\nimport ValidationHandler from '../../common/ValidationHandler';\n\nexport function Questions({\n  questionCount,\n  questions\n }) {\n  const [validations, setValidations] = useState([])\n  const value = useSelector((state) => state.value)\n  const questionOne = useSelector((state) => state.questionOne)\n  const questionTwo = useSelector((state) => state.questionTwo)\n  const questionThree = useSelector((state) => state.questionThree)\n  const questionFour = useSelector((state) => state.questionFour)\n  const questionFive = useSelector((state) => state.questionFive)\n  const responses = useSelector((state) => state.responses)\n  const dispatch = useDispatch()\n\n  const surveySubmission = () => {\n    const response = {\n      qOne: questionOne,\n      qTwo: questionTwo,\n      qThree: questionThree,\n      qFour: questionFour,\n      qFive: questionFive\n    }\n\n    let validationErrors = []\n\n    // Validates each input\n    const qOneValidation = ValidationHandler(questionOne)\n    const qTwoValidation = ValidationHandler(questionTwo)\n    const qThreeValidation = ValidationHandler(questionThree)\n    const qFourValidation = ValidationHandler(questionFour)\n    const qFiveValidation = ValidationHandler(questionFive)\n\n    // CHecks to see if any inputs failed validation\n    if (qOneValidation.length > 0) validationErrors.push(qOneValidation)\n    if (qTwoValidation.length > 0) validationErrors.push(qTwoValidation)\n    if (qThreeValidation.length > 0) validationErrors.push(qThreeValidation)\n    if (qFourValidation.length > 0) validationErrors.push(qFourValidation)\n    if (qFiveValidation.length > 0) validationErrors.push(qFiveValidation)\n\n    if (validationErrors.length > 0) {\n      setValidations(validationErrors)\n    } else {\n      // refreshing submission for next user\n      setValidations([])\n      dispatch({ type: 'UPDATERESPONSES', payload: response })\n      dispatch({ type: 'UPDATESQUESTIONONE', payload: '' })\n      dispatch({ type: 'UPDATESQUESTIONTWO', payload: '' })\n      dispatch({ type: 'UPDATESQUESTIONTHREE', payload: '' })\n      dispatch({ type: 'CLEARQUESTIONFOUR' })\n      dispatch({ type: 'CLEARQUESTIONFIVE' })\n      dispatch({ type: 'ZERO' })\n    }\n  }\n\n  const buttonStyle = {\n    margin: 40\n  }\n\n  const containerStyle = {\n    paddingTop: 30\n  }\n\n  const errorStyle = {\n    color: 'red'\n  }\n\n  let chosenQuestion = <Question question={questions[value]} />\n  return (\n    <Container style={containerStyle}>\n      <Col>{chosenQuestion}</Col>\n      <Col>({value + 1} / {questionCount})</Col>\n      <Col style={errorStyle}>{validations.length > 0 ? validations.join(', ') : null}</Col>\n      <Button\n        data-test='button'\n        onClick={surveySubmission}\n        style={buttonStyle}\n        variant=\"primary\">\n        Submit Survey\n        </Button>\n    </Container>\n  )\n}\n\nexport default Questions;"]},"metadata":{},"sourceType":"module"}