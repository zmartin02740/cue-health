{"ast":null,"code":"var _jsxFileName = \"/Users/zack/Desktop/code/fullstack-engineer-exercise-1/frontend/src/common/DirectionalButton.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { connect } from 'react-redux';\nimport * as actionType from '../store/actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport function DirectionalButton({\n  direction,\n  questionCount,\n  questions\n}) {\n  _s();\n\n  const value = useSelector(state => state.value);\n  const dispatch = useDispatch();\n  console.log(value >= questionCount);\n  const isLeft = direction === 'left';\n  const isMax = value >= questionCount;\n  const isMin = value <= -1;\n\n  const handleValueChange = () => {\n    if (isLeft) {\n      if (value <= 0) {\n        alert('You are at the first question');\n      } else {\n        dispatch({\n          type: 'DECREASE'\n        });\n      }\n    } else {\n      if (value > questionCount - 2) {\n        dispatch({\n          type: 'ZERO'\n        });\n      } else {\n        dispatch({\n          type: 'INCREASE'\n        });\n      }\n    }\n  };\n\n  const buttonStyle = {\n    marginTop: 100\n  };\n  let buttonComponent;\n\n  if (isLeft && isMin) {\n    buttonComponent = null;\n  } else if (!isLeft && isMax) {\n    buttonComponent = null;\n  } else {\n    buttonComponent = /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"primary\",\n      size: \"sm\",\n      style: buttonStyle,\n      onClick: handleValueChange,\n      children: [isLeft ? 'Previous' : 'Next', \" Question\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: buttonComponent\n  }, void 0, false);\n}\n\n_s(DirectionalButton, \"Nsft19KCGn8HEUpoe9GMalF4FFI=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = DirectionalButton;\nexport default DirectionalButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"DirectionalButton\");","map":{"version":3,"sources":["/Users/zack/Desktop/code/fullstack-engineer-exercise-1/frontend/src/common/DirectionalButton.js"],"names":["React","Button","useDispatch","useSelector","connect","actionType","DirectionalButton","direction","questionCount","questions","value","state","dispatch","console","log","isLeft","isMax","isMin","handleValueChange","alert","type","buttonStyle","marginTop","buttonComponent"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAO,KAAKC,UAAZ,MAA4B,kBAA5B;;;AAEA,OAAO,SAASC,iBAAT,CAA2B;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,aAAb;AAA4BC,EAAAA;AAA5B,CAA3B,EAAoE;AAAA;;AACzE,QAAMC,KAAK,GAAGP,WAAW,CAAEQ,KAAD,IAAWA,KAAK,CAACD,KAAlB,CAAzB;AACA,QAAME,QAAQ,GAAGV,WAAW,EAA5B;AACAW,EAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAK,IAAIF,aAArB;AACA,QAAMO,MAAM,GAAGR,SAAS,KAAK,MAA7B;AACA,QAAMS,KAAK,GAAGN,KAAK,IAAIF,aAAvB;AACA,QAAMS,KAAK,GAAGP,KAAK,IAAI,CAAC,CAAxB;;AACA,QAAMQ,iBAAiB,GAAG,MAAM;AAC9B,QAAIH,MAAJ,EAAY;AACV,UAAIL,KAAK,IAAI,CAAb,EAAgB;AACdS,QAAAA,KAAK,CAAC,+BAAD,CAAL;AACD,OAFD,MAEO;AACLP,QAAAA,QAAQ,CAAC;AAAEQ,UAAAA,IAAI,EAAE;AAAR,SAAD,CAAR;AACD;AACF,KAND,MAMO;AACL,UAAIV,KAAK,GAAGF,aAAa,GAAG,CAA5B,EAA+B;AAC7BI,QAAAA,QAAQ,CAAC;AAAEQ,UAAAA,IAAI,EAAE;AAAR,SAAD,CAAR;AACD,OAFD,MAEO;AACLR,QAAAA,QAAQ,CAAC;AAAEQ,UAAAA,IAAI,EAAE;AAAR,SAAD,CAAR;AACD;AACF;AACF,GAdD;;AAgBA,QAAMC,WAAW,GAAG;AAClBC,IAAAA,SAAS,EAAE;AADO,GAApB;AAIA,MAAIC,eAAJ;;AAEA,MAAIR,MAAM,IAAIE,KAAd,EAAqB;AACnBM,IAAAA,eAAe,GAAG,IAAlB;AACD,GAFD,MAEO,IAAI,CAACR,MAAD,IAAWC,KAAf,EAAsB;AAC3BO,IAAAA,eAAe,GAAG,IAAlB;AACD,GAFM,MAEA;AACLA,IAAAA,eAAe,gBACb,QAAC,MAAD;AACE,MAAA,OAAO,EAAC,SADV;AAEE,MAAA,IAAI,EAAC,IAFP;AAGE,MAAA,KAAK,EAAEF,WAHT;AAIE,MAAA,OAAO,EAAEH,iBAJX;AAAA,iBAKGH,MAAM,GAAG,UAAH,GAAgB,MALzB;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AASD;;AAED,sBACE;AAAA,cAAGQ;AAAH,mBADF;AAGD;;GAhDejB,iB;UACAH,W,EACGD,W;;;KAFHI,iB;AAkDhB,eAAeA,iBAAf","sourcesContent":["import React from 'react'\nimport Button from 'react-bootstrap/Button'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { connect } from 'react-redux';\nimport * as actionType from '../store/actions';\n\nexport function DirectionalButton({ direction, questionCount, questions }) {\n  const value = useSelector((state) => state.value)\n  const dispatch = useDispatch()\n  console.log(value >= questionCount)\n  const isLeft = direction === 'left'\n  const isMax = value >= questionCount\n  const isMin = value <= -1\n  const handleValueChange = () => {\n    if (isLeft) {\n      if (value <= 0) {\n        alert('You are at the first question')\n      } else {\n        dispatch({ type: 'DECREASE' })\n      }\n    } else {\n      if (value > questionCount - 2) {\n        dispatch({ type: 'ZERO' })\n      } else {\n        dispatch({ type: 'INCREASE' })\n      }\n    }\n  }\n\n  const buttonStyle = {\n    marginTop: 100\n  };\n\n  let buttonComponent\n\n  if (isLeft && isMin) {\n    buttonComponent = null\n  } else if (!isLeft && isMax) {\n    buttonComponent = null\n  } else {\n    buttonComponent = (\n      <Button\n        variant=\"primary\"\n        size=\"sm\"\n        style={buttonStyle}\n        onClick={handleValueChange}>\n        {isLeft ? 'Previous' : 'Next'} Question\n      </Button>\n    )\n  }\n\n  return (\n    <>{buttonComponent}</>\n  )\n}\n\nexport default DirectionalButton;"]},"metadata":{},"sourceType":"module"}